#############################################################################################
# This role generates crypto material for users.
#############################################################################################

############################################################################################
# Copy generate-crypto-peer-chaincode.sh script from scrips directory
- name: Copy generate-crypto-peer-chaincode.sh to destination directory
  copy:
    src: "{{ playbook_dir }}/../scripts/{{ files }}"
    dest: build/
    mode: 0755
    remote_src: yes
  with_items:
    - generate-crypto-peer-chaincode.sh
  loop_control:
    loop_var: files
  when: setup_user_env is not defined or setup_user_env == true

############################################################################################
# This task changes the permission 
- name: Changing the permissions
  file:  
    path: ./build/{{ files }} 
    mode: '0775'
  with_items:
    - generate-crypto-peer-chaincode.sh
  loop_control:
    loop_var: files
  when: setup_user_env is not defined or setup_user_env == true

############################################################################################
# This task copies generate-crypto-peer-chaincode.sh file using the CA Tools Pod 
- name: Copy generate-crypto-peer-chaincode.sh file using the CA Tools 
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get po -n {{ component_name }} | grep "ca-tools" | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/generate-crypto-peer-chaincode.sh {{ component_name }}/${CA_TOOL_CLI}:/root/ca-tools/{{org_name|lower}}/generate-crypto-peer-chaincode.sh  
  when: setup_user_env is not defined or setup_user_env == true

############################################################################################
# This section is to generate user certificate for peers in the same org using same certificates
# This task executes generate-crypto-peer-chaincode.sh file using the CA Tools to generate user certificate 
- name: Execute generate-crypto-peer-chaincode.sh file using the CA Tools
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get po -n {{ component_name }} | grep "ca-tools" | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ component_name }} ${CA_TOOL_CLI} -- /root/ca-tools/{{org_name|lower}}/./generate-crypto-peer-chaincode.sh {{component_name}} {{org_name|lower}} {{peer.name}}-chaincode app {{org_name}} "{{subject}}"
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{ component_name }}/${CA_TOOL_CLI}:crypto-config ./build/crypto-config
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{ component_name }}/${CA_TOOL_CLI}:/root/ca-tools ./build/ca-tools
  when: cert_generated|default(None) == None

# This task copies the first set of certificates to a temp folder, which will be copied to the new peers in the same orgs later
- name: Copy peer certificates to temp folder
  shell: |
    mkdir -p {{temp_peer_cert_folder}} && cp -a ./build/crypto-config/peerOrganizations {{temp_peer_cert_folder}} &&
    cp -a ./build/ca-tools {{temp_peer_cert_folder}}
  when: cert_generated|default(None) == None

# This task is to set variables to keep track of the certifcate for the first peer
- name: Set varibles if crypto-config is copied
  set_fact:
    peer_admin_cert_file:  "{{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}}/msp/admincerts/{{peer.name}}-chaincode@{{component_name}}-cert.pem"
    src_peer_cert_file_name: "{{peer.name}}-chaincode@{{component_name}}-cert.pem"
    peer_cert_folder: "{{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}}"
    peer_ca_tool_folder: "{{temp_peer_cert_folder}}/ca-tools/{{org_name|lower}}/client{{peer.name}}-chaincode"
    ca_tool_admin_full_path: "{{temp_peer_cert_folder}}/ca-tools/{{org_name|lower}}/client{{peer.name}}-chaincode/msp/admincerts/{{peer.name}}-chaincode@{{component_name}}-cert.pem"
    src_peer_ca_tool_file_name: "{{peer.name}}-chaincode@{{component_name}}-cert.pem"
  when: 
    - cert_generated|default(None) == None

# This task is to copy the files peer certifcate to target temp folder
- name: Copy peer certificates to local
  shell: |
    mkdir -p {{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}} && 
    cp -a {{ peer_cert_folder }}/. {{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}}/ && 
    mkdir -p {{temp_peer_cert_folder}}/ca-tools/{{org_name|lower}}/client{{peer.name}}-chaincode && 
    cp -a {{peer_ca_tool_folder}}/. {{temp_peer_cert_folder}}/ca-tools/{{org_name|lower}}/client{{peer.name}}-chaincode/
  when:
    - cert_generated|default(None) == true

# This task copies the certificate which needs to be renamed for particular peer in crypto-config
- name: Copy crypto-config peer certificate file with correct peer name under crypto-config
  ansible.builtin.copy:
    src: "{{peer_admin_cert_file}}"
    dest: "{{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}}/msp/admincerts/{{peer.name}}-chaincode@{{component_name}}-cert.pem"
    remote_src: true
  when:
    - cert_generated|default(None) == true

# This task copies the certificate which needs to be renamed for particular peer in ca-tool
- name: Copy ca-tool peer certificate file with correct peer name under ca-tool
  ansible.builtin.copy:
    src: "{{ca_tool_admin_full_path}}"
    dest: "{{temp_peer_cert_folder}}/ca-tools/{{org_name|lower}}/client{{peer.name}}-chaincode/msp/admincerts/{{peer.name}}-chaincode@{{component_name}}-cert.pem"
    remote_src: true
  when:
    - cert_generated|default(None) == true

# This task removes the certificate not below to the target peer under crypto-config
- name: Remove useless certficiate file in the new peer folder under crypto-config
  ansible.builtin.file:
    path: "{{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}}/msp/admincerts/{{src_peer_cert_file_name}}"
    state: absent
  when:
    - cert_generated|default(None) == true

# This task removes the certificate not below to the target peer
- name: Remove useless certficiate file in the new peer folder under ca-tool
  ansible.builtin.file:
    path: "{{temp_peer_cert_folder}}/ca-tools/{{org_name|lower}}/client{{peer.name}}-chaincode/msp/admincerts/{{src_peer_ca_tool_file_name}}"
    state: absent
  when:
    - cert_generated|default(None) == true

# This task copies all the certificate for the peer back to ca-tool pod
- name: Copy certificate to peer pod
  shell: |
    export CA_TOOL_CLI=$(KUBECONFIG={{ kubernetes.config_file }} kubectl get po -n {{ component_name }} | grep "ca-tools" | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}} {{ component_name }}/${CA_TOOL_CLI}:crypto-config/peerOrganizations/{{component_name}}/users
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{temp_peer_cert_folder}}/ca-tools/{{org_name|lower}}/client{{peer.name}}-chaincode {{ component_name }}/${CA_TOOL_CLI}:/root/ca-tools/{{org_name|lower}}
  when:
    - cert_generated|default(None) == true

# Copy to ./build/crypto-config for vault saving 
- name: Copy certificates to ./build/crypto-config for Vault
  shell: |
    mkdir -p ./build/crypto-config/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}} && 
    cp -a {{temp_peer_cert_folder}}/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}}/. ./build/crypto-config/peerOrganizations/{{component_name}}/users/{{peer.name}}-chaincode@{{component_name}}
  when:
    - cert_generated|default(None) == true

# This task is to check if the crypto-config file exists
- name: Check if the crypto-config/peerOrganizations/ca-tools file are copied
  stat:
    path: "{{temp_peer_cert_folder}}/ca-tools"
  register: crypto_config_files
  when: cert_generated|default(None) == None

# This task is to set variables if the file exists
- name: Set varibles if crypto-config is copied
  set_fact:
    cert_generated: true
  when:
    - cert_generated|default(None) == None
    - crypto_config_files.stat.exists

############################################################################################
# Copy certificates to vault
- name: Copy certificates to vault
  shell: |
    vault write {{ vault.secret_path | default('secret') }}/crypto/peerOrganizations/{{ component_name }}/peers/{{ peer.name }}.{{ component_name }}/chaincode ca.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{peer.name}}-chaincode@{{ component_name }}/tls/ca.crt)" client.crt="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{peer.name}}-chaincode@{{ component_name }}/tls/client.crt)" client.key="$(cat ./build/crypto-config/peerOrganizations/{{ component_name }}/users/{{peer.name}}-chaincode@{{ component_name }}/tls/client.key)"
  environment:
    VAULT_ADDR: "{{ vault.url }}"
    VAULT_TOKEN: "{{ vault.root_token }}"
