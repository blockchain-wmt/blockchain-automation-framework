############################################################################################
# This task creates valuefiles for the cli of first peer creator organization
# Creates the CLI and to fetch the latest configuration block to add new config details
############################################################################################

# checking for fabric cli
- name: "Check if fabric cli is already present"
  k8s_info:
    kind: Pod
    namespace: "{{ org.name }}-net"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
    label_selectors:
      - app = cli
  register: existing_cli

- debug:
    var: existing_cli

# Creeate the value file for creater org first peer
- name: "start cli"
  shell: |
    KUBECONFIG={{ org.k8s.config_file }} helm upgrade --install -f {{playbook_dir}}/../../../{{org.gitops.release_dir}}/{{ participantx.name }}/existing_peer_cli_job.yaml {{ peer.name }}-{{ participantx.name }}-cli {{playbook_dir}}/../../../{{org.gitops.chart_source}}/fabric_cli
  when: existing_cli.resources|length == 0

# waiting for fabric cli
- name: "Check if fabric cli is present"
  k8s_info:
    kind: Pod
    namespace: "{{ org.name }}-net"
    kubeconfig: "{{ org.k8s.config_file }}"
    context: "{{ org.k8s.context }}"
    label_selectors:
      - app = cli
  register: get_cli
  until: ("Running" in get_cli|json_query('resources[*].status.phase'))
  retries: "{{ network.env.retry_count}}"
  delay: 40

############################################################################################
# This task fetch the config block from blockchain by executing the create_block.sh script file
# from first peer of creator cli
- name: update configuration block to blockchain using files from build folder
  shell: |
    export PEER_CLI=$(KUBECONFIG={{ org.k8s.config_file }} kubectl get po -n {{ org.name }}-net | grep "cli" | head -n 1 | awk '{print $1}')
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ../../../build/{{ channel_name }}_config.json {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/{{ channel_name }}_config.json
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ../../../build/{{ channel_name }}_updated_config.json {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/{{ channel_name }}_updated_config.json
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} -- configtxlator proto_encode --input {{ channel_name }}_config.json --type common.Config --output {{ channel_name }}_config.pb
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} -- configtxlator proto_encode --input {{ channel_name }}_updated_config.json --type common.Config --output {{ channel_name }}_modified_config.pb
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} -- configtxlator compute_update --channel_id {{ channel_name }} --original {{ channel_name }}_config.pb --updated {{ channel_name }}_modified_config.pb --output {{ channel_name }}_config_update.pb 
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} -- configtxlator proto_decode --input {{ channel_name }}_config_update.pb --type common.ConfigUpdate --output {{ channel_name }}_config_update.json
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/{{ channel_name }}_config_update.json ./build/{{ channel_name }}_config_update.json
    echo '{"payload":{"header":{"channel_header":{"channel_id":"'{{ channel_name }}'", "type":2}},"data":{"config_update":'$(cat ./build/{{ channel_name }}_config_update.json)'}}}' | jq . > ./build/{{ channel_name }}_config_update_in_envelope.json
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp ./build/{{ channel_name }}_config_update_in_envelope.json {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/{{ channel_name }}_config_update_in_envelope.json
    KUBECONFIG={{ kubernetes.config_file }} kubectl exec -n {{ org.name }}-net ${PEER_CLI} -- configtxlator proto_encode --input {{ channel_name }}_config_update_in_envelope.json --type common.Envelope --output {{ channel_name }}_config_update_in_envelope.pb
    KUBECONFIG={{ kubernetes.config_file }} kubectl cp {{ org.name }}-net/${PEER_CLI}:/opt/gopath/src/github.com/hyperledger/fabric/peer/{{ channel_name }}_config_update_in_envelope.pb ../../../build/{{ channel_name }}_config_update_in_envelope.pb
  environment:
    ORDERER_CA: "/opt/gopath/src/github.com/hyperledger/fabric/crypto/orderer/tls/ca.crt"
  vars: 
    kubernetes: "{{ org.k8s }}"
